(((1) + ((2) * (3))) + (4)) : (Nat)
(Nat.add_assoc) : (∀ (n m k : (Nat)), ((((n) + (m)) + (k)) = ((n) + ((m) + (k)))))
(([(1), (2), (3)]) ++ ([(3), (4), (5)])) : ((List) (Nat))
(∀ (p : ((Nat) → ((Nat) → (Prop)))), ((p) ((1) + (2)) (3))) : (Prop)
(if (True) then (1) else (2)) : (Nat)
